// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgrepo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDeviceStates = `-- name: DeleteDeviceStates :exec
delete
from telemetry_data
where device_id = $1
`

func (q *Queries) DeleteDeviceStates(ctx context.Context, deviceID string) error {
	_, err := q.db.Exec(ctx, deleteDeviceStates, deviceID)
	return err
}

const getDeviceTelemetry = `-- name: GetDeviceTelemetry :many
select device_id, timestamp, state_name, state_value
from telemetry_data
where device_id = $1
order by timestamp desc
`

func (q *Queries) GetDeviceTelemetry(ctx context.Context, deviceID string) ([]TelemetryDatum, error) {
	rows, err := q.db.Query(ctx, getDeviceTelemetry, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TelemetryDatum
	for rows.Next() {
		var i TelemetryDatum
		if err := rows.Scan(
			&i.DeviceID,
			&i.Timestamp,
			&i.StateName,
			&i.StateValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDeviceState = `-- name: InsertDeviceState :exec
insert into telemetry_data (device_id, timestamp, state_name, state_value)
values (unnest($1::text[]),
        unnest($2::timestamp[]),
        unnest($3::text[]),
        unnest($4::bytea[]))
`

type InsertDeviceStateParams struct {
	DevicesIds  []string
	Timestamps  []pgtype.Timestamp
	StateNames  []string
	StateValues [][]byte
}

func (q *Queries) InsertDeviceState(ctx context.Context, arg InsertDeviceStateParams) error {
	_, err := q.db.Exec(ctx, insertDeviceState,
		arg.DevicesIds,
		arg.Timestamps,
		arg.StateNames,
		arg.StateValues,
	)
	return err
}
